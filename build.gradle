buildscript {
    apply from: 'versions.gradle'
    addRepos(repositories)
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.7'
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
    }
}

allprojects {
    addRepos(repositories)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


// for configuring android library projects
static def configureAndroidLib(PluginAware p) {
    p.with {
        apply plugin: "com.android.library"
    }
    configureAndroidCommon(p)
}
ext.configureAndroidLib = this.&configureAndroidLib


// for configuring android library projects
static def configureAndroidApp(PluginAware p) {
    p.with {
        apply plugin: "com.android.application"
    }
    configureAndroidCommon(p)
}
ext.configureAndroidApp = this.&configureAndroidApp

// get the git commit hash
static def getGitHash(Project p) {
    p.with {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
}


// for configuring android projects
static def configureAndroidCommon(PluginAware p) {
    p.with {

        // kotlin x android
        apply plugin: "kotlin-android"

        // data binding
        apply plugin: 'kotlin-kapt'

        android {
            compileSdkVersion 32
            buildToolsVersion "30.0.2"
            defaultConfig {
                minSdkVersion 18
                targetSdkVersion 32
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                vectorDrawables.useSupportLibrary true
                multiDexEnabled true
                buildConfigField "String", "GIT_HASH", "\"${getGitHash(p)}\""
            }
            buildFeatures {
                dataBinding true
            }
            compileOptions {
                targetCompatibility JavaVersion.VERSION_11
                sourceCompatibility JavaVersion.VERSION_11
            }
            kotlinOptions {
                jvmTarget = "1.8"
            }
            lintOptions {
                ignoreWarnings false
                abortOnError true
            }
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }
        }
        dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"
        }
    }
    configureKotlinDependencies(p)
}


// for configuring plain kotlin projects
static def configureKotlin(PluginAware p) {
    p.with {
        apply plugin: "java-library"
        apply plugin: "kotlin"

        sourceCompatibility = 11
        targetCompatibility = 11
    }
    configureKotlinDependencies(p)
}
ext.configureKotlin = this.&configureKotlin


// for configuring plain kotlin projects
static def configureKotlinDependencies(PluginAware p) {
    p.with {
        dependencies {

            // kotlin
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.10"
            implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.10"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"

            // test
            if ("lib.streamtest" in name)
            {
                api project(":lib.testutils")
            }
            else if ("lib.testutils" in name)
            {
                // don't add project(":lib.testutils")
            }
            else
            {
                testImplementation project(":lib.testutils")
            }
        }
    }
}
